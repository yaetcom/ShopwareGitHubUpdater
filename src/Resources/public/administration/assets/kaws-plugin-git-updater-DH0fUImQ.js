const d=`{% block sw_meteor_card_content_wrapper %} {% parent %} <div v-if="isExtension" style="background-color:rgba(168, 129, 175, 0.2); border-bottom-left-radius:8px;border-bottom-right-radius:8px;"> <hr style="opacity:0.3"> <div class="inner-content"> <div class="inline-form-row"> <div class="inline-field-container"> <label class="inline-label rvdw-color-true-text">Quelle:</label> <sw-text-field v-model:value="localRepositoryUrl" :placeholder="'Quelle (URL)'" class="inline-input" @blur="onSaveSettings" /> </div> <div class="button-container"> <sw-button variant="primary" @click="checkUpdate" class="update-button rvdw-color-false" :disabled="!localRepositoryUrl || isLoadingVersions" :loading="isLoadingVersions" > {{ isLoadingVersions ? 'Laden...' : 'Check' }} </sw-button> </div> <div class="inline-field-container"> <label class="inline-label rvdw-color-true-text">Version:</label> <sw-select-field v-model:value="selectedVersion" :placeholder="versionOptions.length > 0 ? null : 'Version auswählen'" class="inline-input version" :disabled="isLoadingVersions" > <option v-for="option in versionOptions" :key="option.value" :value="option.value" > {{ option.label }} </option> </sw-select-field> </div> <div class="button-container"> <sw-button variant="primary" @click="Update" class="update-button rvdw-color-true" :disabled="!selectedVersion || isLoadingVersions" :loading="isLoadingVersions" > {{ isLoadingVersions ? 'Laden...' : 'Update' }} </sw-button> </div> </div> </div> </div> {% endblock %}`,{Criteria:l}=Shopware.Data,{Component:u,Utils:w,Mixin:g}=Shopware;u.override("sw-meteor-card",{template:d,inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],mixins:["sw-extension-error"],emits:["update-list"],props:{title:{type:String,required:!1,default:null},hero:{type:Boolean,required:!1,default:!1},isLoading:{type:Boolean,required:!1,default:!1},large:{type:Boolean,required:!1,default:!1},defaultTab:{type:String,required:!1,default:null},isExtension:{type:Boolean,required:!1,default:!0},extension:{type:Object,required:!1,default:()=>({})}},data(){return{githubUrl:null,versionOptions:[],selectedVersion:null,isLoadingVersions:!1,isLoading:!1,updateMessage:"",localRepositoryUrl:""}},computed:{currentExtension(){return this.extension&&Object.keys(this.extension).length>0?this.extension:this.$parent&&this.$parent.extension?this.$parent.extension:this.$parent&&this.$parent.$parent&&this.$parent.$parent.extension?this.$parent.$parent.extension:{}}},created(){this.checkForPendingUpdate()},watch:{currentExtension:{handler(e){e&&e.localId&&this.loadExtensionGitSettings(e)},immediate:!0}},methods:{async checkUpdate(){if(!this.localRepositoryUrl){this.createNotificationError({title:"Fehler",message:"Bitte geben Sie eine GitHub-URL ein."});return}this.isLoadingVersions=!0,console.log("Loading started, isLoadingVersions:",this.isLoadingVersions);try{console.log("Checking updates for:",this.currentExtension.name,"from:",this.localRepositoryUrl);const e={...this.currentExtension,repositoryUrl:this.localRepositoryUrl};await this.checkForNewVersion(e)}catch(e){this.createNotificationError({title:"Fehler beim Laden der Versionen",message:e.message})}finally{this.isLoadingVersions=!1,console.log("Loading finished, isLoadingVersions:",this.isLoadingVersions)}},async Update(){if(!this.selectedVersion){this.createNotificationError({title:"Fehler",message:"Bitte wählen Sie eine Version aus."});return}this.updatePluginGithub(this.selectedVersion),console.log("Updating extension:",this.currentExtension.name,"to version:",this.selectedVersion)},async loadExtensionGitSettings(e){try{const t=this.repositoryFactory.create("plugin_git"),s=new l;s.addFilter(l.equals("pluginId",e.localId));const n=(await t.search(s,Shopware.Context.api)).first();n&&n.githubUrl?this.localRepositoryUrl=n.githubUrl:this.localRepositoryUrl=""}catch(t){console.error("Failed to load git settings:",t),this.localRepositoryUrl=""}},async checkForPendingUpdate(){const e=localStorage.getItem("pendingExtensionUpdate");if(e)try{const t=JSON.parse(e);console.log("Pending update found:",t),t.extensionName===this.currentExtension.name&&(localStorage.removeItem("pendingExtensionUpdate"),await this.shopwareExtensionService.updateExtension(t.extensionName,t.extensionType,!1),this.createNotificationSuccess({title:"Update abgeschlossen",message:`${this.currentExtension.label} wurde erfolgreich auf Version ${t.version} aktualisiert!`}),console.log("Extension update completed"))}catch(t){console.error("Failed to apply pending update:",t),localStorage.removeItem("pendingExtensionUpdate")}},async updatePluginGithub(e){this.isLoading=!0,this.updateMessage="Lade Plugin von GitHub...";try{const t=await fetch("/api/_action/github/update-plugin",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({url:this.localRepositoryUrl,name:this.currentExtension.name,version:e})}),s=await t.json();if(console.log(s),!t.ok)throw new Error(s.message||"Update fehlgeschlagen.");this.createNotificationSuccess({title:"Update erfolgreich",message:this.currentExtension.label+" wurde auf Version "+e+" aktualisiert. Seite wird neu geladen..."}),localStorage.setItem("pendingExtensionUpdate",JSON.stringify({extensionName:this.currentExtension.name,extensionType:this.currentExtension.type,version:e})),setTimeout(async()=>{await this.cacheApiService.clear(),window.location.reload()},2e3),this.isLoading=!1}catch{this.createNotificationError({title:"Update fehlgeschlagen",message:"Ungültige URL"}),this.isLoading=!1}},async checkForNewVersion(e){try{if(e.repositoryUrl.length>0){const s=await(await fetch(`/api/_action/github/check-version?name=${encodeURIComponent(e.repositoryUrl)}`,{method:"GET",headers:{Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}})).json();if(console.log(s),s.success&&s.versions){const i=s.versions.map(o=>{const r=o.replace(/^v/,"");return{original:o,clean:r,label:r,value:o}}),n=e.version.replace(/^v/,""),a=i.filter(o=>this.isVersionHigher(o.clean,n));this.versionOptions=a.map(o=>({label:o.label,value:o.value})),a.length>0?(this.selectedVersion=a[0].value,this.createNotificationInfo({title:`${a.length} neuere Version(en) gefunden`,message:`Neueste verfügbare Version: ${a[0].label}`})):this.createNotificationInfo({title:`${e.label} ist aktuell`,message:`Du hast bereits die neueste Version: ${n}`})}else this.createNotificationError({title:"Fehler mit URL",message:"Ungültige URL oder keine Versionen gefunden"})}else this.createNotificationError({title:"Fehler mit URL",message:"Keine URL hinterlegt."})}catch(t){this.createNotificationError({title:`Fehler bei der Versionsprüfung für ${e.name}`,message:t.message})}},compareVersions(e,t){const s=e.split(".").map(Number),i=t.split(".").map(Number);for(let n=0;n<Math.max(s.length,i.length);n++){const a=s[n]||0,o=i[n]||0;if(a>o)return 1;if(a<o)return-1}return 0},isVersionHigher(e,t){return this.compareVersions(e,t)>0},updatePluginKaws(){this.clearCacheAndReloadPage(),this.clearCacheAndReloadPage()},clearCacheAndReloadPage(){return this.cacheApiService.clear().then(()=>{window.location.reload()})},async onSaveSettings(){try{this.isLoading=!0;const e=this.repositoryFactory.create("plugin_git");if(!this.currentExtension.localId)throw new Error("Keine lokale Plugin-ID gefunden.");const t=new l;t.addFilter(l.equals("pluginId",this.currentExtension.localId));const i=(await e.search(t,Shopware.Context.api)).first();if(!this.localRepositoryUrl||this.localRepositoryUrl.trim()===""){i&&(await e.delete(i.id,Shopware.Context.api),this.createNotificationSuccess({title:"Erfolgreich gelöscht",message:"Die Git-Einstellungen wurden entfernt."}));return}let n;i?n=i:(n=e.create(Shopware.Context.api),n.pluginId=this.currentExtension.localId,n.source="git"),n.githubUrl=this.localRepositoryUrl,n.source="git",await e.save(n,Shopware.Context.api),this.createNotificationSuccess({title:"Erfolgreich gespeichert",message:"Die Git-Einstellungen wurden gespeichert."})}catch(e){this.createNotificationError({title:"Fehler beim Speichern",message:e.message})}finally{this.isLoading=!1}}}});const p=`<sw-meteor-card class="sw-extension-card-base" :class="extensionCardClasses" :isExtension="true" :extension="extension" > <sw-loader v-if="isLoading" /> <div class="sw-extension-card-base__switch"> {% block sw_extension_card_base_activation_switch_switch %} <mt-switch v-model="isActive" v-tooltip="{ showDelay: 300, message: $tc('sw-extension-store.component.sw-extension-card-base.allowDisableTooltip'), disabled: allowDisable }" :disabled="extensionManagementDisabled || !isInstalled || (isActive && !allowDisable)" /> {% endblock %} </div> <sw-extension-icon :src="image" /> {% block sw_extension_card_base_activation_switch %} <div class="sw-extension-card-base__info"> <section> <span class="sw-extension-card-base__info-name"> {{ extension.label }} </span> {% block sw_extension_card_base_info_inactive_label %} <span v-if="isInstalled && !extension.active" class="sw-extension-card-base__info-inactive" > {{ $tc('sw-extension-store.component.sw-extension-card-base.inactiveLabel') }} </span> {% endblock %} </section> </div> {% endblock %} <div class="sw-extension-card-base__meta-info"> {% block sw_extension_card_base_info_content %} <section> <span v-if="extension.version" class="sw-extension-card-base__meta-info-version" > {{ $tc('sw-extension.my-extensions.listing.version') }}: {{ extension.version }} </span> <span v-if="!extensionManagementDisabled && isUpdateable"> <a href="#" @click.prevent="updateExtension(false)" > {{ $tc('sw-extension.my-extensions.listing.update') }} </a> </span> </section> <span v-if="isInstalled && extension.updatedAt" class="rvdw-color-true-text"> Aktualisiert: {{ dateFilter(extension.updatedAt.date, { month: 'numeric', year: 'numeric', hour: undefined, minute: undefined }) }} </span> {% endblock %} <span v-if="isInstalled"> {{ $tc('sw-extension-store.component.sw-extension-card-base.installedLabel') }} {{ dateFilter(extension.installedAt.date, { month: 'numeric', year: 'numeric', hour: undefined, minute: undefined }) }} </span> <span v-else-if="extension.storeLicense"> {{ $tc('sw-extension-store.component.sw-extension-card-base.purchasedLabel') }} {{ dateFilter(extension.storeLicense.creationDate, { month: 'numeric', year: 'numeric', hour: undefined, minute: undefined }) }} </span> </div> <div class="sw-extension-card-base__main-action"> <span v-if="!isInstalled" class="sw-extension-card-base__open-extension" role="button" tabindex="0" @click="openPermissionsModalForInstall" @keydown.enter="openPermissionsModalForInstall" > {{ $tc('sw-extension-store.component.sw-extension-card-base.installExtensionLabel') }} </span> <router-link v-else-if="extension.configurable" :to="{ name: 'sw.extension.config', params: { namespace: extension.name } }" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.config') }} </router-link> </div> <sw-context-button v-if="showContextMenu" class="sw-extension-card-base__context-menu" :menu-width="180" > {% block sw_extension_card_base_context_menu_actions %} <sw-context-menu-item v-if="openLinkExists && extension.active" :disabled="!openLinkExists" :router-link="link" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.openExtension') }} </sw-context-menu-item> <sw-context-menu-item v-if="privacyPolicyLink" @click="openPrivacyAndSafety" > <span class="sw-extension-card-base__context-menu-privacy-link"> {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.privacyAndSafetyLabel') }} <mt-icon name="regular-external-link-s" size="10px" /> </span> </sw-context-menu-item> <sw-context-menu-item v-if="isInstalled && extension.privacyPolicyExtension" @click="openPrivacyModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.policyExtensions') }} </sw-context-menu-item> <sw-context-menu-item v-if="isInstalled && permissions" @click="openPermissionsModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.permissions') }} </sw-context-menu-item> <sw-context-menu-item v-if="!extensionManagementDisabled && isUpdateable" @click="updateExtension(false)" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.updateLabel', { version: extension.latestVersion }, 0) }} </sw-context-menu-item> {% block sw_extension_card_base_context_menu_actions_additional %}{% endblock %} <sw-context-menu-item v-if="!extensionManagementDisabled && extension.storeLicense && extension.storeLicense.variant === 'rent' && extension.storeLicense.expirationDate === null" class="sw-extension-card-base__cancel-and-remove-link" variant="danger" @click="openRemovalModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.cancelAndRemoveLabel') }} </sw-context-menu-item> <sw-context-menu-item v-else-if="!extensionManagementDisabled && isRemovable" class="sw-extension-card-base__remove-link" variant="danger" @click="openRemovalModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.removeLabel') }} </sw-context-menu-item> <sw-context-menu-item v-if="!extensionManagementDisabled && isUninstallable" variant="danger" @click="openUninstallModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.uninstallLabel') }} </sw-context-menu-item> {% endblock %} </sw-context-button> {% block sw_extension_card_base_modals %} <sw-extension-uninstall-modal v-if="showUninstallModal" :extension-name="extension.label" :is-licensed="extension.storeLicense !== null" :is-loading="isLoading" @modal-close="closeUninstallModal" @uninstall-extension="closeModalAndUninstallExtension" /> <sw-extension-removal-modal v-if="showRemovalModal" :extension-name="extension.label" :is-licensed="extension.storeLicense !== null && extension.storeLicense.variant === 'rent'" :is-loading="isLoading" @modal-close="closeRemovalModal" @remove-extension="closeModalAndRemoveExtension" /> <sw-extension-permissions-modal v-if="showPermissionsModal" :extension-label="extension.label" :permissions="permissions" :domains="extension.domains" :action-label="permissionModalActionLabel" @modal-close="closePermissionsModal" @close-with-action="closePermissionsModalAndInstallExtension" /> <sw-extension-privacy-policy-extensions-modal v-if="showPrivacyModal" :extension-name="extension.label" :privacy-policy-extension="extension.privacyPolicyExtension" @modal-close="closePrivacyModal" /> <sw-extension-permissions-modal v-if="showConsentAffirmationModal" :title="consentAffirmationModalTitle" :extension-label="extension.label" :permissions="consentAffirmationDeltas.permissions" :domains="consentAffirmationDeltas.domains" :action-label="consentAffirmationModalActionLabel" :close-label="consentAffirmationModalCloseLabel" :description="consentAffirmationModalDescription" @modal-close="closeConsentAffirmationModal" @close-with-action="closeConsentAffirmationModalAndUpdateExtension" /> {% endblock %} </sw-meteor-card>`,{Criteria:c}=Shopware.Data,{Component:h,Utils:f,Mixin:b}=Shopware;h.override("sw-extension-card-base",{template:p,inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],props:{extension:{type:Object,required:!0}},data(){return{isLoading:!1,updateMessage:"",showGitSettings:!1}},created(){this.loadExtensionsGit(this.extension)},computed:{sourceOptions(){return[{value:"shopware",name:"Shopware Store"},{value:"git",name:"GitHub"}]}},methods:{async loadExtensionsGit(e){const t=this.repositoryFactory.create("plugin_git"),s=new c;s.addFilter(c.equals("pluginId",e.localId));const n=(await t.search(s,Shopware.Context.api)).first();n&&n.source==="git"?(this.extension.updateGitSource=n.source,this.extension.repositoryUrl=n.githubUrl):(this.extension.updateGitSource="shopware",this.extension.repositoryUrl="")}}});const m=`{% block sw_extension_my_extensions_index_smart_bar_actions %} <template #smart-bar-actions> <sw-button-group class="sw-product-detail__save-button-group" :split-button="true" > <sw-extension-file-upload v-if="acl.can('system.plugin_upload') || !extensionManagementDisabled" /> <sw-context-button> <template #button> <mt-button v-if="isShopware67" class="sw-product-detail__button-context-menu" square variant="primary" size="default" > <sw-icon name="regular-chevron-down-xs" size="16" /> </mt-button> <sw-button v-else class="sw-product-detail__button-context-menu" square variant="primary" size="default" > <sw-icon name="regular-chevron-down-xs" size="16" /> </sw-button> </template> <sw-context-menu-item @click="onGitInstall" > Erweiterung via Git Installieren </sw-context-menu-item> </sw-context-button> </sw-button-group> </template> {% endblock %} {% block sw_extension_my_extensions_index %} {% parent %} <sw-modal v-if="showGitInstallModal" title="Plugin aus Git installieren" @modal-close="showGitInstallModal = false" @modal-confirm="submitGitInstall" :confirm-text="'Installieren'" :cancel-text="'Abbrechen'" :is-loading="isInstalling" > <div class="sw-field sw-field--medium"> <label class="sw-label">GitHub-URL</label> <sw-text-field v-model:value="gitInstallUrl" placeholder="https://github.com/Benutzer/Repo" @update:value="loadAvailableVersions" /> </div> <div v-if="isLoadingVersions" class="sw-field sw-field--medium"> <sw-loader /> <p>Lade verfügbare Versionen...</p> </div> <div v-if="showVersionSelection && !isLoadingVersions" class="sw-field sw-field--medium"> <label class="sw-label">Version auswählen</label> <sw-single-select v-model:value="selectedVersion" :options="availableVersions.map(version => ({ value: version, label: version }))" :placeholder="'Version wählen'" /> <sw-help-text :text="\`\${availableVersions.length} kompatible Version(en) gefunden\`" /> </div> <div v-if="!showVersionSelection && !isLoadingVersions && gitInstallUrl" class="sw-field sw-field--medium"> <sw-alert variant="warning"> Keine kompatiblen Versionen für diese Shopware-Version gefunden oder Repository-URL ungültig. </sw-alert> </div> <div v-if="showVersionSelection && selectedVersion" class="sw-field sw-field--medium"> <sw-alert variant="info"> <strong>Zu installierende Version:</strong> {{ selectedVersion }} <br> <small>Repository: {{ gitInstallUrl }}</small> </sw-alert> </div> <template #modal-footer> <sw-button variant="default" @click="showGitInstallModal = false"> Abbrechen </sw-button> <sw-button variant="primary" @click="submitGitInstall" :disabled="!gitInstallUrl || isLoadingVersions || !selectedVersion" > {{ selectedVersion ? \`Version \${selectedVersion} installieren\` : 'Installieren' }} </sw-button> </template> </sw-modal> {% endblock %}`,{Criteria:v}=Shopware.Data,{Component:x,Utils:y}=Shopware;x.override("sw-extension-my-extensions-index",{template:m,inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],mixins:["sw-extension-error"],data(){return{showGitInstallModal:!1,gitInstallUrl:"",gitInstallPluginName:"",isInstalling:!1,availableVersions:[],selectedVersion:null,isLoadingVersions:!1,showVersionSelection:!1}},computed:{isShopware67(){return Shopware.Context.app.config.version.slice(0,3)==="6.7"}},methods:{onGitInstall(){this.gitInstallUrl="",this.gitInstallPluginName="",this.availableVersions=[],this.selectedVersion=null,this.showVersionSelection=!1,this.showGitInstallModal=!0},async loadAvailableVersions(){if(this.gitInstallUrl){this.isLoadingVersions=!0;try{const t=await(await fetch(`/api/_action/github/install-versions?url=${encodeURIComponent(this.gitInstallUrl)}`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}})).json();t.success&&t.versions.length>0?(this.availableVersions=t.versions,this.selectedVersion=t.versions[0],this.showVersionSelection=!0):(this.availableVersions=[],this.selectedVersion=null,this.showVersionSelection=!1)}catch(e){this.createNotificationError({title:"Fehler beim Laden der Versionen",message:e.message}),this.availableVersions=[],this.selectedVersion=null,this.showVersionSelection=!1}finally{this.isLoadingVersions=!1}}},async submitGitInstall(){this.isInstalling=!0;try{const e={url:this.gitInstallUrl};this.selectedVersion&&(e.version=this.selectedVersion);const s=await(await fetch("/api/_action/github/install-plugin",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify(e)})).json();if(!s.success)throw new Error(s.message);this.createNotificationSuccess({title:"Installation erfolgreich",message:`Plugin "${s.pluginName}" wurde installiert. Seite wird neu geladen...`}),this.showGitInstallModal=!1,this.$emit("update-list"),this.cacheApiService?this.cacheApiService.clear().finally(()=>{setTimeout(()=>{window.location.reload()},1e3)}):setTimeout(()=>{window.location.reload()},2e3)}catch(e){this.createNotificationError({title:"Fehler bei Installation",message:e.message})}finally{this.isInstalling=!1}}}});
//# sourceMappingURL=kaws-plugin-git-updater-DH0fUImQ.js.map
