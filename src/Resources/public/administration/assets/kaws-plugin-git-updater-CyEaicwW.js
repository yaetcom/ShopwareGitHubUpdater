const d=`{% block sw_meteor_card_content_wrapper %} {% parent %} <div v-if="isExtension" style="background-color:rgba(168, 129, 175, 0.2); border-bottom-left-radius:8px;border-bottom-right-radius:8px;"> <hr style="opacity:0.3"> <div class="inner-content"> <div class="inline-form-row"> <div class="inline-field-container"> <label class="inline-label rvdw-color-true-text">Quelle:</label> <sw-text-field v-model:value="localRepositoryUrl" :placeholder="'Quelle (URL)'" class="inline-input" @blur="onSaveSettings" /> </div> <div class="button-container"> <sw-button variant="primary" @click="checkUpdate" class="update-button rvdw-color-false" :disabled="!localRepositoryUrl || isLoadingVersions" :loading="isLoadingVersions" > {{ isLoadingVersions ? 'Laden...' : 'Check' }} </sw-button> </div> <div class="inline-field-container"> <label class="inline-label rvdw-color-true-text">Version:</label> <sw-select-field v-model:value="selectedVersion" :placeholder="versionOptions.length > 0 ? null : 'Version auswählen'" class="inline-input version" :disabled="isLoadingVersions" > <option v-for="option in versionOptions" :key="option.value" :value="option.value" > {{ option.label }} </option> </sw-select-field> </div> <div class="button-container"> <sw-button variant="primary" @click="Update" class="update-button rvdw-color-true" :disabled="!selectedVersion || isLoadingVersions" :loading="isLoadingVersions" > {{ isLoadingVersions ? 'Laden...' : 'Update' }} </sw-button> </div> </div> </div> </div> {% endblock %}`,{Criteria:a}=Shopware.Data,{Component:u,Utils:f,Mixin:w}=Shopware;u.override("sw-meteor-card",{template:d,inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],mixins:["sw-extension-error"],emits:["update-list"],props:{title:{type:String,required:!1,default:null},hero:{type:Boolean,required:!1,default:!1},isLoading:{type:Boolean,required:!1,default:!1},large:{type:Boolean,required:!1,default:!1},defaultTab:{type:String,required:!1,default:null},isExtension:{type:Boolean,required:!1,default:!0},extension:{type:Object,required:!1,default:()=>({})}},data(){return{githubUrl:null,versionOptions:[],selectedVersion:null,isLoadingVersions:!1,isLoading:!1,updateMessage:"",localRepositoryUrl:""}},computed:{currentExtension(){return this.extension&&Object.keys(this.extension).length>0?this.extension:this.$parent&&this.$parent.extension?this.$parent.extension:this.$parent&&this.$parent.$parent&&this.$parent.$parent.extension?this.$parent.$parent.extension:{}}},created(){this.checkForPendingUpdate()},watch:{currentExtension:{handler(e){e&&e.localId&&this.loadExtensionGitSettings(e)},immediate:!0}},methods:{async checkUpdate(){if(!this.localRepositoryUrl){this.createNotificationError({title:"Fehler",message:"Bitte geben Sie eine GitHub-URL ein."});return}this.isLoadingVersions=!0,console.log("Loading started, isLoadingVersions:",this.isLoadingVersions);try{console.log("Checking updates for:",this.currentExtension.name,"from:",this.localRepositoryUrl),console.log(this.currentExtension);const e={...this.currentExtension,repositoryUrl:this.localRepositoryUrl};await this.checkForNewVersion(e)}catch(e){this.createNotificationError({title:"Fehler beim Laden der Versionen",message:e.message})}finally{this.isLoadingVersions=!1,console.log("Loading finished, isLoadingVersions:",this.isLoadingVersions)}},async Update(){if(!this.selectedVersion){this.createNotificationError({title:"Fehler",message:"Bitte wählen Sie eine Version aus."});return}this.updatePluginGithub(this.selectedVersion),console.log("Updating extension:",this.currentExtension.name,"to version:",this.selectedVersion)},async loadExtensionGitSettings(e){try{const t=this.repositoryFactory.create("plugin_git"),s=new a;s.addFilter(a.equals("pluginId",e.localId));const i=(await t.search(s,Shopware.Context.api)).first();i&&i.githubUrl?this.localRepositoryUrl=i.githubUrl:this.localRepositoryUrl=""}catch(t){console.error("Failed to load git settings:",t),this.localRepositoryUrl=""}},async checkForPendingUpdate(){const e=localStorage.getItem("pendingExtensionUpdate");if(e)try{const t=JSON.parse(e);console.log("Pending update found:",t),t.extensionName===this.currentExtension.name&&(localStorage.removeItem("pendingExtensionUpdate"),await this.shopwareExtensionService.updateExtension(t.extensionName,t.extensionType,!1),this.createNotificationSuccess({title:"Update abgeschlossen",message:`${this.currentExtension.label} wurde erfolgreich auf Version ${t.version} aktualisiert!`}),console.log("Extension update completed"))}catch(t){console.error("Failed to apply pending update:",t),localStorage.removeItem("pendingExtensionUpdate")}},async updatePluginGithub(e){this.isLoading=!0,this.updateMessage="Lade Plugin von GitHub...";try{const t=await fetch("/api/_action/github/update-plugin",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({url:this.localRepositoryUrl,name:this.currentExtension.name,version:e})}),s=await t.json();if(console.log(s),!t.ok)throw new Error(s.message||"Update fehlgeschlagen.");this.createNotificationSuccess({title:"Update erfolgreich",message:this.currentExtension.label+" wurde auf Version "+e+" aktualisiert. Seite wird neu geladen..."}),localStorage.setItem("pendingExtensionUpdate",JSON.stringify({extensionName:this.currentExtension.name,extensionType:this.currentExtension.type,version:e})),setTimeout(async()=>{await this.cacheApiService.clear(),window.location.reload()},2e3),this.isLoading=!1}catch{this.createNotificationError({title:"Update fehlgeschlagen",message:"Ungültige URL"}),this.isLoading=!1}},async checkForNewVersion(e){try{if(e.repositoryUrl.length>0){const s=await(await fetch(`/api/_action/github/check-version?name=${encodeURIComponent(e.repositoryUrl)}`,{method:"GET",headers:{Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}})).json();if(console.log(s),s.success&&s.versions){const n=s.versions.map(o=>{const l=o.replace(/^v/,"");return{original:o,clean:l,label:l,value:o}}),i=e.version.replace(/^v/,""),r=n.filter(o=>this.isVersionHigher(o.clean,i));this.versionOptions=r.map(o=>({label:o.label,value:o.value})),r.length>0?(this.selectedVersion=r[0].value,this.createNotificationInfo({title:`${r.length} neuere Version(en) gefunden`,message:`Neueste verfügbare Version: ${r[0].label}`})):this.createNotificationInfo({title:`${e.label} ist aktuell`,message:`Du hast bereits die neueste Version: ${i}`})}else this.createNotificationError({title:"Fehler mit URL",message:"Ungültige URL oder keine Versionen gefunden"})}else this.createNotificationError({title:"Fehler mit URL",message:"Keine URL hinterlegt."})}catch(t){this.createNotificationError({title:`Fehler bei der Versionsprüfung für ${e.name}`,message:t.message})}},compareVersions(e,t){const s=e.split(".").map(Number),n=t.split(".").map(Number);for(let i=0;i<Math.max(s.length,n.length);i++){const r=s[i]||0,o=n[i]||0;if(r>o)return 1;if(r<o)return-1}return 0},isVersionHigher(e,t){return this.compareVersions(e,t)>0},updatePluginKaws(){this.clearCacheAndReloadPage(),this.clearCacheAndReloadPage()},clearCacheAndReloadPage(){return this.cacheApiService.clear().then(()=>{window.location.reload()})},async onSaveSettings(){try{this.isLoading=!0;const e=this.repositoryFactory.create("plugin_git");if(!this.currentExtension.localId)throw new Error("Keine lokale Plugin-ID gefunden.");const t=new a;t.addFilter(a.equals("pluginId",this.currentExtension.localId));const n=(await e.search(t,Shopware.Context.api)).first();if(!this.localRepositoryUrl||this.localRepositoryUrl.trim()===""){n&&(await e.delete(n.id,Shopware.Context.api),this.createNotificationSuccess({title:"Erfolgreich gelöscht",message:"Die Git-Einstellungen wurden entfernt."}));return}let i;n?i=n:(i=e.create(Shopware.Context.api),i.pluginId=this.currentExtension.localId,i.source="git"),i.githubUrl=this.localRepositoryUrl,i.source="git",await e.save(i,Shopware.Context.api),this.createNotificationSuccess({title:"Erfolgreich gespeichert",message:"Die Git-Einstellungen wurden gespeichert."})}catch(e){this.createNotificationError({title:"Fehler beim Speichern",message:e.message})}finally{this.isLoading=!1}}}});const p='<sw-meteor-card class="sw-extension-card-base" :class="extensionCardClasses" :isExtension="true" :extension="extension" > {% parent %} </sw-meteor-card>',{Criteria:c}=Shopware.Data,{Component:h,Utils:x,Mixin:b}=Shopware;h.override("sw-extension-card-base",{template:p,inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],props:{extension:{type:Object,required:!0}},data(){return{isLoading:!1,updateMessage:"",showGitSettings:!1}},created(){this.loadExtensionsGit(this.extension)},computed:{sourceOptions(){return[{value:"shopware",name:"Shopware Store"},{value:"git",name:"GitHub"}]}},methods:{async loadExtensionsGit(e){const t=this.repositoryFactory.create("plugin_git"),s=new c;s.addFilter(c.equals("pluginId",e.localId));const i=(await t.search(s,Shopware.Context.api)).first();i&&i.source==="git"?(this.extension.updateGitSource=i.source,this.extension.repositoryUrl=i.githubUrl):(this.extension.updateGitSource="shopware",this.extension.repositoryUrl="")}}});const g=`{% block sw_extension_my_extensions_index_smart_bar_actions %} <template #smart-bar-actions> <sw-button-group class="sw-product-detail__save-button-group" :split-button="true" > <sw-extension-file-upload v-if="acl.can('system.plugin_upload') || !extensionManagementDisabled" /> <sw-context-button> <template #button> <mt-button class="sw-product-detail__button-context-menu" square variant="primary" size="default" > <sw-icon name="regular-chevron-down-xs" size="16" /> </mt-button> </template> <sw-context-menu-item @click="onGitInstall" > Erweiterung via Git Installieren </sw-context-menu-item> </sw-context-button> </sw-button-group> </template> {% endblock %} {% block sw_extension_my_extensions_index %} {% parent %} <sw-modal v-if="showGitInstallModal" title="Plugin aus Git installieren" @modal-close="showGitInstallModal = false" @modal-confirm="submitGitInstall" :confirm-text="'Installieren'" :cancel-text="'Abbrechen'" :is-loading="isInstalling" > <div class="sw-field sw-field--medium"> <label class="sw-label">GitHub-URL</label> <sw-text-field v-model:value="gitInstallUrl" placeholder="https://github.com/Benutzer/Repo" /> </div> <template #modal-footer> <sw-button variant="default" @click="showGitInstallModal = false"> Abbrechen </sw-button> <sw-button variant="primary" @click="submitGitInstall"> Installieren </sw-button> </template> </sw-modal> {% endblock %}`,{Criteria:y}=Shopware.Data,{Component:m,Utils:v}=Shopware;m.override("sw-extension-my-extensions-index",{template:g,inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],mixins:["sw-extension-error"],data(){return{showGitInstallModal:!1,gitInstallUrl:"",gitInstallPluginName:"",isInstalling:!1}},methods:{onGitInstall(){this.gitInstallUrl="",this.gitInstallPluginName="",this.showGitInstallModal=!0},async submitGitInstall(){this.isInstalling=!0;try{const t=await(await fetch("/api/_action/github/install-plugin",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({url:this.gitInstallUrl})})).json();if(!t.success)throw new Error(t.message);this.createNotificationSuccess({title:"Installation erfolgreich",message:`Plugin "${t.pluginName}" wurde installiert.`}),this.showGitInstallModal=!1,this.$emit("update-list")}catch(e){this.createNotificationError({title:"Fehler bei Installation",message:e.message})}finally{this.isInstalling=!1}}}});
//# sourceMappingURL=kaws-plugin-git-updater-CyEaicwW.js.map
