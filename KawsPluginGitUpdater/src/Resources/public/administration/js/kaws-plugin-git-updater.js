!function(){var e={860:function(){},879:function(e,t,n){var i=n(860);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),(0,n(534).A)("59d45232",i,!0,{})},534:function(e,t,n){"use strict";function i(e,t){for(var n=[],i={},r=0;r<t.length;r++){var s=t[r],o=s[0],a={id:e+":"+r,css:s[1],media:s[2],sourceMap:s[3]};i[o]?i[o].parts.push(a):n.push(i[o]={id:o,parts:[a]})}return n}n.d(t,{A:function(){return f}});var r,s="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!s)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var o={},a=s&&(document.head||document.getElementsByTagName("head")[0]),l=null,c=0,d=!1,u=function(){},p=null,h="data-vue-ssr-id",g="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function f(e,t,n,r){d=n,p=r||{};var s=i(e,t);return m(s),function(t){for(var n=[],r=0;r<s.length;r++){var a=o[s[r].id];a.refs--,n.push(a)}t?m(s=i(e,t)):s=[];for(var r=0;r<n.length;r++){var a=n[r];if(0===a.refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete o[a.id]}}}}function m(e){for(var t=0;t<e.length;t++){var n=e[t],i=o[n.id];if(i){i.refs++;for(var r=0;r<i.parts.length;r++)i.parts[r](n.parts[r]);for(;r<n.parts.length;r++)i.parts.push(w(n.parts[r]));i.parts.length>n.parts.length&&(i.parts.length=n.parts.length)}else{for(var s=[],r=0;r<n.parts.length;r++)s.push(w(n.parts[r]));o[n.id]={id:n.id,refs:1,parts:s}}}}function v(){var e=document.createElement("style");return e.type="text/css",a.appendChild(e),e}function w(e){var t,n,i=document.querySelector("style["+h+'~="'+e.id+'"]');if(i){if(d)return u;i.parentNode.removeChild(i)}if(g){var r=c++;t=x.bind(null,i=l||(l=v()),r,!1),n=x.bind(null,i,r,!0)}else t=y.bind(null,i=v()),n=function(){i.parentNode.removeChild(i)};return t(e),function(i){i?(i.css!==e.css||i.media!==e.media||i.sourceMap!==e.sourceMap)&&t(e=i):n()}}var b=(r=[],function(e,t){return r[e]=t,r.filter(Boolean).join("\n")});function x(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=b(t,r);else{var s=document.createTextNode(r),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(s,o[t]):e.appendChild(s)}}function y(e,t){var n=t.css,i=t.media,r=t.sourceMap;if(i&&e.setAttribute("media",i),p.ssrId&&e.setAttribute(h,t.id),r&&(n+="\n/*# sourceURL="+r.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.d=function(e,t){for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/kawsplugingitupdater/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/kawsplugingitupdater/"),function(){"use strict";n(879);let{Criteria:e}=Shopware.Data,{Component:t,Utils:i,Mixin:r}=Shopware;t.override("sw-meteor-card",{template:'{% block sw_meteor_card_content_wrapper %}\r\n    {% parent %}\r\n    <div v-if="isExtension" style="background-color:rgba(168, 129, 175, 0.2); border-bottom-left-radius:8px;border-bottom-right-radius:8px;">\r\n        <hr style="opacity:0.3">\r\n        <div class="inner-content">\r\n            <div class="inline-form-row">\r\n                \r\n                <div class="inline-field-container">\r\n                    <label class="inline-label rvdw-color-true-text">Quelle:</label>\r\n                    <sw-text-field\r\n                            v-model:value="localRepositoryUrl"\r\n                            :placeholder="\'Quelle (URL)\'"\r\n                            class="inline-input"\r\n                            @blur="onSaveSettings"\r\n                    />\r\n                </div>\r\n                <div class="button-container">\r\n                    <sw-button\r\n                            variant="primary"\r\n                            @click="checkUpdate"\r\n                            class="update-button rvdw-color-false"\r\n                            :disabled="!localRepositoryUrl || isLoadingVersions"\r\n                            :loading="isLoadingVersions"\r\n                    >\r\n                        {{ isLoadingVersions ? \'Laden...\' : \'Check\' }}\r\n                    </sw-button>\r\n                </div>\r\n                \r\n                <div class="inline-field-container">\r\n                    <label class="inline-label rvdw-color-true-text">Version:</label>\r\n                    <sw-select-field\r\n                            v-model:value="selectedVersion"\r\n                            :placeholder="versionOptions.length > 0 ? null : \'Version ausw\xe4hlen\'"\r\n                            class="inline-input version"\r\n                            :disabled="isLoadingVersions"\r\n                    >\r\n                        <option\r\n                            v-for="option in versionOptions"\r\n                            :key="option.value"\r\n                            :value="option.value"\r\n                        >\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </sw-select-field>\r\n                </div>\r\n\r\n                \r\n                <div class="button-container">\r\n                    <sw-button\r\n                            variant="primary"\r\n                            @click="Update"\r\n                            class="update-button rvdw-color-true"\r\n                            :disabled="!selectedVersion || isLoadingVersions"\r\n                            :loading="isLoadingVersions"\r\n                    >\r\n                        {{ isLoadingVersions ? \'Laden...\' : \'Update\' }}\r\n                    </sw-button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n{% endblock %}',inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],mixins:["sw-extension-error"],emits:["update-list"],props:{title:{type:String,required:!1,default:null},hero:{type:Boolean,required:!1,default:!1},isLoading:{type:Boolean,required:!1,default:!1},large:{type:Boolean,required:!1,default:!1},defaultTab:{type:String,required:!1,default:null},isExtension:{type:Boolean,required:!1,default:!0},extension:{type:Object,required:!1,default:()=>({})}},data(){return{githubUrl:null,versionOptions:[],selectedVersion:null,isLoadingVersions:!1,isLoading:!1,updateMessage:"",localRepositoryUrl:""}},computed:{currentExtension(){return this.extension&&Object.keys(this.extension).length>0?this.extension:this.$parent&&this.$parent.extension?this.$parent.extension:this.$parent&&this.$parent.$parent&&this.$parent.$parent.extension?this.$parent.$parent.extension:{}}},created(){this.checkForPendingUpdate()},watch:{currentExtension:{handler(e){e&&e.localId&&this.loadExtensionGitSettings(e)},immediate:!0}},methods:{async checkUpdate(){if(!this.localRepositoryUrl){this.createNotificationError({title:"Fehler",message:"Bitte geben Sie eine GitHub-URL ein."});return}this.isLoadingVersions=!0,console.log("Loading started, isLoadingVersions:",this.isLoadingVersions);try{console.log("Checking updates for:",this.currentExtension.name,"from:",this.localRepositoryUrl),console.log(this.currentExtension);let e={...this.currentExtension,repositoryUrl:this.localRepositoryUrl};await this.checkForNewVersion(e)}catch(e){this.createNotificationError({title:"Fehler beim Laden der Versionen",message:e.message})}finally{this.isLoadingVersions=!1,console.log("Loading finished, isLoadingVersions:",this.isLoadingVersions)}},async Update(){if(!this.selectedVersion){this.createNotificationError({title:"Fehler",message:"Bitte w\xe4hlen Sie eine Version aus."});return}this.updatePluginGithub(this.selectedVersion),console.log("Updating extension:",this.currentExtension.name,"to version:",this.selectedVersion)},async loadExtensionGitSettings(t){try{let n=this.repositoryFactory.create("plugin_git"),i=new e;i.addFilter(e.equals("pluginId",t.localId));let r=(await n.search(i,Shopware.Context.api)).first();r&&r.githubUrl?this.localRepositoryUrl=r.githubUrl:this.localRepositoryUrl=""}catch(e){console.error("Failed to load git settings:",e),this.localRepositoryUrl=""}},async checkForPendingUpdate(){let e=localStorage.getItem("pendingExtensionUpdate");if(e)try{let t=JSON.parse(e);console.log("Pending update found:",t),t.extensionName===this.currentExtension.name&&(localStorage.removeItem("pendingExtensionUpdate"),await this.shopwareExtensionService.updateExtension(t.extensionName,t.extensionType,!1),this.createNotificationSuccess({title:"Update abgeschlossen",message:`${this.currentExtension.label} wurde erfolgreich auf Version ${t.version} aktualisiert!`}),console.log("Extension update completed"))}catch(e){console.error("Failed to apply pending update:",e),localStorage.removeItem("pendingExtensionUpdate")}},async updatePluginGithub(e){this.isLoading=!0,this.updateMessage="Lade Plugin von GitHub...";try{let t=await fetch("/api/_action/github/update-plugin",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({url:this.localRepositoryUrl,name:this.currentExtension.name,version:e})}),n=await t.json();if(console.log(n),!t.ok)throw Error(n.message||"Update fehlgeschlagen.");this.createNotificationSuccess({title:"Update erfolgreich",message:this.currentExtension.label+" wurde auf Version "+e+" aktualisiert. Seite wird neu geladen..."}),localStorage.setItem("pendingExtensionUpdate",JSON.stringify({extensionName:this.currentExtension.name,extensionType:this.currentExtension.type,version:e})),setTimeout(async()=>{await this.cacheApiService.clear(),window.location.reload()},2e3),this.isLoading=!1}catch(e){this.createNotificationError({title:"Update fehlgeschlagen",message:"Ung\xfcltige URL"}),this.isLoading=!1}},async checkForNewVersion(e){try{if(e.repositoryUrl.length>0){let t=await fetch(`/api/_action/github/check-version?name=${encodeURIComponent(e.repositoryUrl)}`,{method:"GET",headers:{Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}),n=await t.json();if(console.log(n),n.success&&n.versions){let t=n.versions.map(e=>{let t=e.replace(/^v/,"");return{original:e,clean:t,label:t,value:e}}),i=e.version.replace(/^v/,""),r=t.filter(e=>this.isVersionHigher(e.clean,i));this.versionOptions=r.map(e=>({label:e.label,value:e.value})),r.length>0?(this.selectedVersion=r[0].value,this.createNotificationInfo({title:`${r.length} neuere Version(en) gefunden`,message:`Neueste verf\xfcgbare Version: ${r[0].label}`})):this.createNotificationInfo({title:`${e.label} ist aktuell`,message:`Du hast bereits die neueste Version: ${i}`})}else this.createNotificationError({title:"Fehler mit URL",message:`Ung\xfcltige URL oder keine Versionen gefunden`})}else this.createNotificationError({title:"Fehler mit URL",message:"Keine URL hinterlegt."})}catch(t){this.createNotificationError({title:`Fehler bei der Versionspr\xfcfung f\xfcr ${e.name}`,message:t.message})}},compareVersions(e,t){let n=e.split(".").map(Number),i=t.split(".").map(Number);for(let e=0;e<Math.max(n.length,i.length);e++){let t=n[e]||0,r=i[e]||0;if(t>r)return 1;if(t<r)return -1}return 0},isVersionHigher(e,t){return this.compareVersions(e,t)>0},updatePluginKaws(){this.clearCacheAndReloadPage(),this.clearCacheAndReloadPage()},clearCacheAndReloadPage(){return this.cacheApiService.clear().then(()=>{window.location.reload()})},async onSaveSettings(){try{let t;this.isLoading=!0;let n=this.repositoryFactory.create("plugin_git");if(!this.currentExtension.localId)throw Error("Keine lokale Plugin-ID gefunden.");let i=new e;i.addFilter(e.equals("pluginId",this.currentExtension.localId));let r=(await n.search(i,Shopware.Context.api)).first();if(!this.localRepositoryUrl||""===this.localRepositoryUrl.trim()){r&&(await n.delete(r.id,Shopware.Context.api),this.createNotificationSuccess({title:"Erfolgreich gel\xf6scht",message:"Die Git-Einstellungen wurden entfernt."}));return}r?t=r:((t=n.create(Shopware.Context.api)).pluginId=this.currentExtension.localId,t.source="git"),t.githubUrl=this.localRepositoryUrl,t.source="git",await n.save(t,Shopware.Context.api),this.createNotificationSuccess({title:"Erfolgreich gespeichert",message:"Die Git-Einstellungen wurden gespeichert."})}catch(e){this.createNotificationError({title:"Fehler beim Speichern",message:e.message})}finally{this.isLoading=!1}}}});let{Criteria:s}=Shopware.Data,{Component:o,Utils:a,Mixin:l}=Shopware;o.override("sw-extension-card-base",{template:'<sw-meteor-card\r\n        class="sw-extension-card-base"\r\n        :class="extensionCardClasses"\r\n        :isExtension="true"\r\n        :extension="extension"\r\n>\r\n    {% parent %}\r\n</sw-meteor-card>\r\n',inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],props:{extension:{type:Object,required:!0}},data(){return{isLoading:!1,updateMessage:"",showGitSettings:!1}},created(){this.loadExtensionsGit(this.extension)},computed:{sourceOptions(){return[{value:"shopware",name:"Shopware Store"},{value:"git",name:"GitHub"}]}},methods:{async loadExtensionsGit(e){let t=this.repositoryFactory.create("plugin_git"),n=new s;n.addFilter(s.equals("pluginId",e.localId));let i=(await t.search(n,Shopware.Context.api)).first();i&&"git"===i.source?(this.extension.updateGitSource=i.source,this.extension.repositoryUrl=i.githubUrl):(this.extension.updateGitSource="shopware",this.extension.repositoryUrl="")}}});let{Criteria:c}=Shopware.Data,{Component:d,Utils:u}=Shopware;d.override("sw-extension-my-extensions-index",{template:'{% block sw_extension_my_extensions_index_smart_bar_actions %}\r\n    <template #smart-bar-actions>\r\n        <sw-button-group\r\n            class="sw-product-detail__save-button-group"\r\n            :split-button="true"\r\n        >\r\n\r\n            <sw-extension-file-upload v-if="acl.can(\'system.plugin_upload\') || !extensionManagementDisabled" />\r\n            <sw-context-button>\r\n                <template #button>\r\n                    <sw-button\r\n                        class="sw-product-detail__button-context-menu"\r\n                        square\r\n                        variant="primary"\r\n                        >\r\n                        <sw-icon\r\n                            name="regular-chevron-down-xs"\r\n                            size="16"\r\n                        />\r\n                    </sw-button>\r\n                </template>\r\n                <sw-context-menu-item\r\n                        @click="onGitInstall"\r\n                >\r\n                    Erweiterung via Git Installieren\r\n                </sw-context-menu-item>\r\n            </sw-context-button>\r\n\r\n        </sw-button-group>\r\n    </template>\r\n{% endblock %}\r\n\r\n{% block sw_extension_my_extensions_index %}\r\n    {% parent %}\r\n    <sw-modal\r\n            v-if="showGitInstallModal"\r\n            title="Plugin aus Git installieren"\r\n            @modal-close="showGitInstallModal = false"\r\n            @modal-confirm="submitGitInstall"\r\n            :confirm-text="\'Installieren\'"\r\n            :cancel-text="\'Abbrechen\'"\r\n            :is-loading="isInstalling"\r\n    >\r\n        <div class="sw-field sw-field--medium">\r\n            <label class="sw-label">GitHub-URL</label>\r\n            <sw-text-field v-model:value="gitInstallUrl" placeholder="https://github.com/Benutzer/Repo" />\r\n        </div>\r\n\r\n        <template #modal-footer>\r\n            <sw-button variant="default" @click="showGitInstallModal = false">\r\n                Abbrechen\r\n            </sw-button>\r\n            <sw-button variant="primary" @click="submitGitInstall">\r\n                Installieren\r\n            </sw-button>\r\n        </template>\r\n    </sw-modal>\r\n{% endblock %}',inject:["systemConfigApiService","shopwareExtensionService","extensionStoreActionService","cacheApiService","repositoryFactory"],mixins:["sw-extension-error"],data(){return{showGitInstallModal:!1,gitInstallUrl:"",gitInstallPluginName:"",isInstalling:!1}},methods:{onGitInstall(){this.gitInstallUrl="",this.gitInstallPluginName="",this.showGitInstallModal=!0},async submitGitInstall(){this.isInstalling=!0;try{let e=await fetch("/api/_action/github/install-plugin",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({url:this.gitInstallUrl})}),t=await e.json();if(!t.success)throw Error(t.message);this.createNotificationSuccess({title:"Installation erfolgreich",message:`Plugin "${t.pluginName}" wurde installiert.`}),this.showGitInstallModal=!1,this.$emit("update-list")}catch(e){this.createNotificationError({title:"Fehler bei Installation",message:e.message})}finally{this.isInstalling=!1}}}})}()}();